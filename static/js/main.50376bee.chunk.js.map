{"version":3,"sources":["components/file-icons.js","components/file-browser.js","App.js","serviceWorker.js","index.js"],"names":["FileIcons","selected","label","type","size","onChange","className","onClick","toFixed","FileBrowser","files","selectedFolders","handleFileClick","selectedfolderId","handleChildChange","folderId","subSelections","map","index","key","name","children","App","state","data","totalSize","fileCount","loading","error","this","setState","Axios","get","response","getTotals","sort","a","b","calculateTotals","item","prevState","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.50376bee.chunk.js","sourcesContent":["\nimport React from 'react'\n\nconst FileIcons = ({ selected, label, type, size, onChange }) => {\n  const renderItem = () => {\n    if (type === \"folder\") {\n      return (\n        <div>\n          <span className={`fa files__icon ${selected ? 'fa-chevron-down' : 'fa-chevron-right'} `} onClick={() => onChange(!selected)} />\n          <span className={`fa files__icon fa-folder`} />\n          <span className=\"files__label\">{label}</span>\n        </div>\n      )\n    }\n    if (type === \"file\") {\n      return (\n        <div>\n          <span className={`fa files__icon fa-file`} />\n          <span className=\"files__label\">{label} {`${(size / 1000).toFixed(3)} KB`}</span>\n        </div>\n      )\n    }\n  }\n  return (\n    <div className=\"files\">\n      {renderItem()}\n    </div>\n  )\n}\n\nexport default FileIcons","import React from 'react'\nimport FileIcons from './file-icons'\n\n// Recursive Files list\nconst FileBrowser = ({ files, selectedFolders, onChange }) => {\n\n const handleFileClick = (selectedfolderId) => {\n  if (selectedFolders[selectedfolderId]) {\n   delete selectedFolders[selectedfolderId];\n  } else { \n   selectedFolders[selectedfolderId] = {}\n  }\n  onChange(selectedFolders)\n }\n\n const handleChildChange = (folderId, subSelections) => {\n  selectedFolders[folderId] = subSelections;\n  onChange(selectedFolders);\n }\n\n return (\n  <div className=\"file-browser\">\n    {files && files.map((files, index) => (\n    <ul key={`id-${index}`}>\n     <FileIcons\n      selected={selectedFolders[`id-${index}`]}\n      label={files.name}\n      type={files.type}\n      size={files.size}\n      onChange={() => { handleFileClick(`id-${index}`) }}\n     />\n     {(files.children && selectedFolders[`id-${index}`]) &&\n      <FileBrowser\n       files={files.children}\n       selectedFolders={selectedFolders[`id-${index}`]}\n       onChange={(subSelections) => handleChildChange(`id-${index}`, subSelections)}\n      />\n     }\n    </ul>\n   ))}\n  </div>\n )\n}\n\nexport default FileBrowser","import React from 'react'\nimport Axios from 'axios'\nimport FileBrowser from './components/file-browser'\n\nclass App extends React.Component {\n  state = {\n    data: [],\n    totalSize: 0,\n    fileCount: 0,\n    selectedFolders: {},\n    loading: true,\n    error: false\n  }\n\n  async componentDidMount() {\n    this.setState({ loading: true })\n    try {\n      const response = await Axios.get('https://chal-locdrmwqia.now.sh/')\n      if (response.data && response.data.data) {\n        this.getTotals(response.data.data)\n        this.setState({ loading: false, data: response.data.data })\n      }\n      else {\n        this.setState({ loading: false, error: 'network error' })\n      }\n    } catch (err) {\n      this.setState({ loading: false, error: err })\n    }\n  }\n\n  getTotals(response) {\n    const files = response.sort((a, b) => {\n      if (a.type === \"folder\") {\n        return -1\n      }\n      if (b.type === \"file\") {\n        return 1\n      }\n      return 0\n    })\n    this.calculateTotals(files)\n  }\n\n  calculateTotals(data) {\n    return data.map(item => {\n      if (item.type === \"file\" && item.size) {\n        this.setState((prevState) => ({ fileCount: prevState.fileCount + 1, totalSize: prevState.totalSize + item.size }))\n      }\n      if (item.type === \"folder\" && item.children) {\n        this.calculateTotals(item.children)\n      }\n    })\n  }\n\n  render() {\n    const { data, loading, fileCount, totalSize, error } = this.state\n    return (\n      <div className=\"container\">\n        {error ? <h1> Oopsy.. something isn't quite right. Come back later.. </h1> :\n          <div className=\"wrapper\">\n            <h1>File Browser</h1>\n            {loading ? <div className=\"loader\">Loading...</div> :\n              <div>\n                {!loading && data.length < 1 ? <p>No Files Found!</p> : (\n                  <FileBrowser\n                    files={data}\n                    onChange={(selectedFolders) => this.setState({ selectedFolders })}\n                    selectedFolders={this.state.selectedFolders}\n                  />)}\n                <hr></hr>\n                <div className=\"totals\">\n                  <p>Total Files: {fileCount}</p>\n                  <p>Total Filesize: {`${(totalSize / 1000000).toFixed(3)} MB`}</p>\n                </div>\n              </div>\n            }\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './App.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}